untyped

global function GetNetworkVar

#if CLIENT
global function RegisterNetVarBoolChangeCallback
global function RegisterNetVarIntChangeCallback
global function RegisterNetVarTimeChangeCallback
global function RegisterNetVarEntityChangeCallback

global function ExecuteNetBufferedCallbacks
#endif

struct BufferedCallback
{
	string varName
	entity player
	var oldValue
	var newValue
	bool actuallyChanged
	int callbackType
}

                                                                                 
struct
{
#if CLIENT
	table<string, array<void functionref(entity, bool, bool, bool)> >		_netVarBoolChangeCallbacks
	table<string, array<void functionref(entity, int, int, bool)> >			_netVarIntChangeCallbacks
	table<string, array<void functionref(entity, float, float, bool)> >		_netVarTimeChangeCallbacks
	table<string, array<void functionref(entity, entity, entity, bool)> >	_netVarEntityChangeCallbacks

	array<BufferedCallback> _bufferedCallbacks
#endif
} file

                                                                                   
function GetNetworkVar( obj, varName )
{
	Assert( false )
}


#if CLIENT
bool function IsNetVarCallbackAvailable()
{
	if( !level.clientScriptInitialized )                                                               
		return false

	entity localPlayer = GetLocalClientPlayer()
	if( !IsValid( localPlayer ) )                                                     
		return false

	return true
}

void function ExecuteNetBufferedCallbacks()
{
	foreach ( BufferedCallback buffered in file._bufferedCallbacks )
	{
		printt( FUNC_NAME(), "Run CB for:", buffered.varName )

		switch ( buffered.callbackType )                              
		{
			case SNVT_BOOL:
				ExecuteNetVarBoolChangeCallback( buffered.varName, buffered.player, expect bool(buffered.oldValue), expect bool(buffered.newValue), buffered.actuallyChanged )
				break
			case SNVT_TIME:
				ExecuteNetVarTimeChangeCallback( buffered.varName, buffered.player, expect float(buffered.oldValue), expect float(buffered.newValue), buffered.actuallyChanged )
				break
			case SNVT_INT:
				ExecuteNetVarIntChangeCallback( buffered.varName, buffered.player, expect int(buffered.oldValue), expect int(buffered.newValue), buffered.actuallyChanged )
				break
			case SNVT_ENTITY:
				ExecuteNetVarEntityChangeCallback( buffered.varName, buffered.player, expect entity(buffered.oldValue), expect entity(buffered.newValue), buffered.actuallyChanged )
				break
			default:
				Assert( false, "sh_networkvars must always have a type" )
		}
	}

	file._bufferedCallbacks = []
}

void function RegisterBufferedCallback(	string varName, entity player, var oldValue, var newValue, bool actuallyChanged, int callbackType )
{
	BufferedCallback bufferedCallback
	bufferedCallback.varName = varName
	bufferedCallback.player = player
	bufferedCallback.oldValue = oldValue
	bufferedCallback.newValue = newValue
	bufferedCallback.actuallyChanged = actuallyChanged
	bufferedCallback.callbackType = callbackType

	file._bufferedCallbacks.append( bufferedCallback )
}

bool function DoesCallbackRequireValidEntParam( string varName )
{
	int varCategory = GetNetworkedVariableCategory( varName )

	bool isGlobalCategory = (varCategory == SNDC_GLOBAL) || (varCategory == SNDC_GLOBAL_NON_REWIND)
	return !isGlobalCategory
}

bool function ShouldExecuteCallback( string varName, entity entParam )
{
	                                                                           
	bool requireValidEnt = DoesCallbackRequireValidEntParam( varName )
	if ( requireValidEnt && !IsValid( entParam ) )
		return false

	return true
}

                                                                                                                                    
                                                                                                                                    
  
                                                                                                            
                                                                                                            
                                                                                                            
                                                                                                            
                                                                                                            
                                                                                                            
                                                                                                            
  
                                                                                                                                    
                                                                                                                                    

void function RegisterNetVarIntChangeCallback( string varName, void functionref(entity, int, int, bool) callbackFunc )
{
	if ( !(varName in file._netVarIntChangeCallbacks ) )
	{
		file._netVarIntChangeCallbacks[varName] <- []

		RegisterNetworkedVariableChangeCallback_int( varName, void function( entity player, int oldVal, int newVal, bool actuallyChanged ) : (varName) {
			if ( !IsNetVarCallbackAvailable() )
			{
				RegisterBufferedCallback( varName, player, oldVal, newVal, actuallyChanged, SNVT_INT )
				return
			}

			ExecuteNetVarIntChangeCallback(varName, player, oldVal, newVal, actuallyChanged)
		} )
	}

	file._netVarIntChangeCallbacks[varName].append(callbackFunc)
}

void function ExecuteNetVarIntChangeCallback( string varName, entity player, int oldVal, int newVal, bool actuallyChanged )
{
	if ( !ShouldExecuteCallback( varName, player ) )
		return

	foreach ( callbackFunc in file._netVarIntChangeCallbacks[varName] )
	{
		callbackFunc( player, oldVal, newVal, actuallyChanged )
	}
}

void function RegisterNetVarTimeChangeCallback( string varName, void functionref(entity, float, float, bool) callbackFunc )
{
	if ( !(varName in file._netVarTimeChangeCallbacks ) )
	{
		file._netVarTimeChangeCallbacks[varName] <- []

		RegisterNetworkedVariableChangeCallback_time( varName, void function( entity player, float oldVal, float newVal, bool actuallyChanged ) : (varName) {
			if( !IsNetVarCallbackAvailable() )
			{
				RegisterBufferedCallback( varName, player, oldVal, newVal, actuallyChanged, SNVT_TIME )
				return
			}

			ExecuteNetVarTimeChangeCallback(varName, player, oldVal, newVal, actuallyChanged)
		} )
	}

	file._netVarTimeChangeCallbacks[varName].append(callbackFunc)
}

void function ExecuteNetVarTimeChangeCallback( string varName, entity player, float oldVal, float newVal, bool actuallyChanged )
{
	if ( !ShouldExecuteCallback( varName, player ) )
		return

	foreach ( callbackFunc in file._netVarTimeChangeCallbacks[varName] )
	{
		callbackFunc( player, oldVal, newVal, actuallyChanged )
	}
}

void function RegisterNetVarBoolChangeCallback( string varName, void functionref(entity, bool, bool, bool) callbackFunc )
{
	if ( !(varName in file._netVarBoolChangeCallbacks ) )
	{
		file._netVarBoolChangeCallbacks[varName] <- []

		RegisterNetworkedVariableChangeCallback_bool( varName, void function( entity player, bool oldVal, bool newVal, bool actuallyChanged ) : (varName) {
			if( !IsNetVarCallbackAvailable() )
			{
				RegisterBufferedCallback( varName, player, oldVal, newVal, actuallyChanged, SNVT_BOOL )
				return
			}

			ExecuteNetVarBoolChangeCallback(varName, player, oldVal, newVal, actuallyChanged)
		} )
	}

	file._netVarBoolChangeCallbacks[varName].append(callbackFunc)
}

void function ExecuteNetVarBoolChangeCallback( string varName, entity player, bool oldVal, bool newVal, bool actuallyChanged )
{
	if ( !ShouldExecuteCallback( varName, player ) )
		return

	foreach ( callbackFunc in file._netVarBoolChangeCallbacks[varName] )
	{
		callbackFunc( player, oldVal, newVal, actuallyChanged )
	}
}

void function RegisterNetVarEntityChangeCallback( string varName, void functionref(entity, entity, entity, bool) callbackFunc )
{
	if ( !(varName in file._netVarEntityChangeCallbacks ) )
	{
		file._netVarEntityChangeCallbacks[varName] <- []

		RegisterNetworkedVariableChangeCallback_ent( varName, void function( entity player, entity oldVal, entity newVal, bool actuallyChanged ) : (varName) {
			if( !IsNetVarCallbackAvailable() )
			{
				RegisterBufferedCallback( varName, player, oldVal, newVal, actuallyChanged, SNVT_ENTITY )
				return
			}

			ExecuteNetVarEntityChangeCallback(varName, player, oldVal, newVal, actuallyChanged)
		} )
	}

	file._netVarEntityChangeCallbacks[varName].append(callbackFunc)
}

void function ExecuteNetVarEntityChangeCallback( string varName, entity player, entity oldVal, entity newVal, bool actuallyChanged )
{
	if ( !ShouldExecuteCallback( varName, player ) )
		return

	foreach ( callbackFunc in file._netVarEntityChangeCallbacks[varName] )
	{
		callbackFunc( player, oldVal, newVal, actuallyChanged )
	}
}
#endif              