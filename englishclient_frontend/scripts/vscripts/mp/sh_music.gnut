                                                                                                                                             

#if SERVER || CLIENT || UI
global function ShMusic_LevelInit
#endif

#if (SERVER || CLIENT || UI)
global function Loadout_MusicPack
global function MusicPack_GetSortOrdinal

global function MusicPack_GetPreviewMusic
#endif

#if (SERVER || CLIENT || UI)
global function GetMusicPackForPlayer
global function GetMusicPackDefaultIsSelectedLoadout
global function WaitForMusicPackForPlayer

                                            
global function MusicPack_GetMainMenuToLobbyMusic
global function MusicPack_GetLobbyMusic
global function MusicPack_GetLobbyIntoCharacterSelectMusic
global function MusicPack_GetCharacterSelectMusic_Squad
global function MusicPack_GetCharacterSelectMusic_Duo
global function MusicPack_GetCharacterSelectMusic_Solo
global function MusicPack_GetSkydiveMusic
global function MusicPack_GetWinMusic
global function MusicPack_GetLossMusic
global function MusicPack_GetFiringRangeMusic

global function MusicPack_IsCharacterBased
global function MusicPack_GetCharacter
global function MusicPack_GetPortraitImage
global function MusicPack_GetPortraitBlend
#endif

#if SERVER
                                 
                                 
                                      
                                    
#endif

#if CLIENT
global function ServerCallback_PlayMatchEndMusic
#endif

#if SERVER && DEV
                                         
#endif

global const string LOOT_CEREMONY_MUSIC_P1 = "Music_LootCeremony_Pt1"
global const string LOOT_CEREMONY_MUSIC_P2 = "Music_LootCeremony_Pt2"

global array<string> WORKAROUND_UI_MUSIC_SOUND_LIST = [
	"Music_FrontEnd",
	"mainmenu_music_Event1", "Music_Lobby_Event1",                                                                                                     
	              
	"SQ_Music_Lobby_Silence", "SQ_S5_Music_9_44p", "SQ_S5_Music_EP", "SQ_S6_Page_1_01", "SQ_S6_Page_1_02", "SQ_S6_Page_2_01", "SQ_S6_Page_2_02", "SQ_S6_Page_2_03", "SQ_S6_Page_3_01", "SQ_S6_Page_3_02"
	"SQ_S6_Page_4_01", "SQ_S6_Page_4_02", "SQ_S6_Page_4_03", "SQ_S6_Page_5_01", "SQ_S6_Page_5_02", "SQ_S6_Page_5_03", "SQ_S6_Page_6_01", "SQ_S6_Page_6_02", "SQ_S6_Page_7_01", "SQ_S6_Page_7_02", "SQ_S6_Page_7_03"
	"SQ_S6_Page_6_03", "SQ_S7_Page_1_01", "SQ_S7_Page_1_02", "SQ_S7_Page_1_03", "SQ_S7_Page_2_01", "SQ_S7_Page_2_02", "SQ_S7_Page_2_03", "SQ_S7_Page_3_01"
	"SQ_S7_Page_3_02", "SQ_S7_Page_3_03", "SQ_S7_Page_4_01", "SQ_S7_Page_4_02", "SQ_S7_Page_4_03", "SQ_S7_Page_5_01", "SQ_S7_Page_5_02", "SQ_S7_Page_5_03", "SQ_S6_Page_7_01", "SQ_S7_Page_6_02", "SQ_S7_Page_6_03"
	"SQ_S7_Page_7_01", "SQ_S7_Page_7_02", "SQ_S7_Page_7_03", "SQ_S8_Page_2_09", "SQ_S8_Page_2_13", "SQ_S8_Page_2_16", "SQ_S8_Page_2_17", "SQ_S8_Page_3_19", "SQ_S8_Page_3_28", "SQ_S8_Page_3_27", "SQ_S8_Page_1_1"
	"SQ_S8_Page_4_29", "SQ_S8_Page_5_38", "SQ_S8_Page_5_43", "SQ_S8_Page_6_45", "SQ_S8_Page_6_53", "SQ_S8_Page_7_54", "SQ_S8_Page_7_59", "SQ_S9_Page_11_01", "SQ_S9_Page_11_12", "SQ_S9_Page_1_01", "SQ_S9_Page_1_10"
	"SQ_S9_Page_1_12", "SQ_S9_Page_2_01", "SQ_S9_Page_2_07", "SQ_S9_Page_3_01", "SQ_S9_Page_3_06", "SQ_S9_Page_3_07", "SQ_S9_Page_3_11", "SQ_S9_Page_3_13", "SQ_S9_Page_4_01", "SQ_S9_Page_5_02", "SQ_S9_Page_6_01"
	"SQ_S9_Page_6_08", "SQ_S9_Page_6_09", "SQ_S9_Page_6_10", "SQ_S9_Page_6_11", "SQ_S9_Page_7_01", "SQ_S9_Page_7_03", "SQ_S9_Page_7_05", "SQ_S9_Page_7_11", "SQ_S9_Page_7_12", "SQ_S9_Page_8_01", "SQ_S9_Page_8_05"
	"SQ_S9_Page_8_08", "SQ_S9_Page_8_09", "SQ_S9_Page_8_12", "SQ_S9_Page_9_02", "SQ_S9_Page_9_05", "SQ_S9_Page_9_10", "SQ_S9_Page_10_05"
	LOOT_CEREMONY_MUSIC_P1,
	LOOT_CEREMONY_MUSIC_P2
]

struct FileStruct_LifetimeLevel
{
	LoadoutEntry&          musicPackSelectionSlot
	table<ItemFlavor, int> musicPackFlavorSortOrdinalMap

	#if SERVER
		                                                          
	#endif
}
FileStruct_LifetimeLevel& fileLevel

#if SERVER || CLIENT || UI
void function ShMusic_LevelInit()
{
	FileStruct_LifetimeLevel newFileGame
	fileLevel = newFileGame

	AddCallback_RegisterRootItemFlavors( OnRegisterRootItemFlavors )

	#if SERVER
		                                                            
	#endif
}
#endif

#if (SERVER || CLIENT || UI)
void function OnRegisterRootItemFlavors()
{
	array<ItemFlavor> musicPackList = []
	foreach ( asset musicPackAsset in GetBaseItemFlavorsFromArray( "musicPacks" ) )
	{
		if ( musicPackAsset == $"" )
			continue

		ItemFlavor ornull musicPack = RegisterItemFlavorFromSettingsAsset( musicPackAsset )
		if ( musicPack == null )
			continue

		expect ItemFlavor( musicPack )
		musicPackList.append( musicPack )

		#if SERVER || CLIENT
			array<string> verificationFields = [
				                 
				                  
				                         
				"musicLobby",
				                                
				"musicCharacterSelect",
				"musicSkydive",
				"musicWin",
				"musicLoss",
			]

			foreach( string field in verificationFields )
			{
				string alias = GetGlobalSettingsString( musicPackAsset, field )
				if ( !DoesAliasExist( alias ) )
					Warning( "Music Pack Asset '%s' has invalid '%s' miles event '%s'", ItemFlavor_GetHumanReadableRef( musicPack ), field, alias )
			}
		#endif
	}

	foreach ( musicPack in musicPackList )
	{
		string alias1 = MusicPack_GetMainMenuToLobbyMusic( musicPack )
		if ( !WORKAROUND_UI_MUSIC_SOUND_LIST.contains( alias1 ) )
			WORKAROUND_UI_MUSIC_SOUND_LIST.append( alias1 )

		string alias2 = MusicPack_GetLobbyMusic( musicPack )
		if ( !WORKAROUND_UI_MUSIC_SOUND_LIST.contains( alias2 ) )
			WORKAROUND_UI_MUSIC_SOUND_LIST.append( alias2 )
	}

	MakeItemFlavorSet( musicPackList, fileLevel.musicPackFlavorSortOrdinalMap )

	LoadoutEntry entry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "music_pack_selection" )
	entry.networkTo = eLoadoutNetworking.PLAYER_EXCLUSIVE
	                                             
	entry.DEV_name = "Music Pack"
	fileLevel.musicPackSelectionSlot = entry
	entry.validItemFlavorList = musicPackList
	entry.defaultItemFlavor = musicPackList[1]
	entry.favoriteItemFlavor = musicPackList[0]
	entry.maxFavoriteCount = 8

	#if UI
		AddCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer( entry, void function( EHI playerEHI, ItemFlavor flavor ) {
			if ( playerEHI != LocalClientEHI() )
				return

			if ( uiGlobal.WORKAROUND_activeMusicPack != flavor )
				UIMusicUpdate( true )
		} )
	#endif
}
#endif


#if (SERVER || CLIENT || UI)
ItemFlavor function GetMusicPackForPlayer( entity player )
{
	LoadoutEntry entry = Loadout_MusicPack()
	if ( !LoadoutSlot_IsReady( ToEHI( player ), entry ) )
		return GetDefaultItemFlavorForLoadoutSlot( EHI_null, entry )

	ItemFlavor flav = LoadoutSlot_GetItemFlavor( ToEHI( player ), entry )

	#if CLIENT || SERVER
		if ( !IsLobby() && ItemFlavor_IsTheRandom( flav ) )
		{
			int guid = player.GetNonRewindMusicPack()
			if ( guid != 0 )
			{
				flav = GetItemFlavorByGUID( guid )
				                                                              
			}
		}

		asset customPack = GetCurrentPlaylistVarAsset( "force_custom_musicpack" )
		if ( customPack != $"" )
		{
			printf( "%s() - Playlist forcing music pack to: '%s'", FUNC_NAME(), string( customPack ) )
			flav = GetItemFlavorByAsset( customPack )
		}
	#else
		flav = __GetMusicPackForPlayer_RollTheRandom( player )
	#endif                   

	return flav
}

bool function GetMusicPackDefaultIsSelectedLoadout( entity player )
{
	LoadoutEntry entry = Loadout_MusicPack()
	if ( !LoadoutSlot_IsReady( ToEHI( player ), entry ) )
		return true

	ItemFlavor flav = LoadoutSlot_GetItemFlavor( ToEHI( player ), entry )
	if ( ItemFlavor_IsTheDefault( flav ) )
		return true

	return false
}
#endif


#if (SERVER || CLIENT || UI)
ItemFlavor function WaitForMusicPackForPlayer( entity player )
{
	return LoadoutSlot_WaitForItemFlavor( ToEHI( player ), Loadout_MusicPack() )
}
#endif


#if (SERVER || CLIENT || UI)
LoadoutEntry function Loadout_MusicPack()
{
	return fileLevel.musicPackSelectionSlot
}
#endif


#if (SERVER || CLIENT || UI)
int function MusicPack_GetSortOrdinal( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return fileLevel.musicPackFlavorSortOrdinalMap[flavor]
}
#endif


#if (SERVER || CLIENT || UI)
string function MusicPack_GetPreviewMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicPreview" )
}
#endif


                              
                                                                 
   
  	                                                              
  	                                                                                
   
        

#if (SERVER || CLIENT || UI)
string function MusicPack_GetMainMenuToLobbyMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicMainMenuToLobby" )
}
#endif


#if (SERVER || CLIENT || UI)
string function MusicPack_GetLobbyMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicLobby" )
}

string function MusicPack_GetFiringRangeMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicFiringRange" )
}
#endif


#if (SERVER || CLIENT || UI)
string function MusicPack_GetLobbyIntoCharacterSelectMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicLobbyToCharacterSelect" )
}
#endif


#if (SERVER || CLIENT || UI)
string function MusicPack_GetCharacterSelectMusic_Squad( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicCharacterSelect" )
}
#endif


#if (SERVER || CLIENT || UI)
string function MusicPack_GetCharacterSelectMusic_Duo( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicCharacterSelectDuo" )
}
#endif


#if (SERVER || CLIENT || UI)
string function MusicPack_GetCharacterSelectMusic_Solo( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicCharacterSelectSolo" )
}
#endif


#if (SERVER || CLIENT || UI)
string function MusicPack_GetSkydiveMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicSkydive" )
}
#endif


#if (SERVER || CLIENT || UI)
string function MusicPack_GetWinMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicWin" )
}
#endif


#if (SERVER || CLIENT || UI)
string function MusicPack_GetLossMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicLoss" )
}
#endif


#if SERVER || CLIENT || UI
bool function MusicPack_IsCharacterBased( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsBool( ItemFlavor_GetAsset( flavor ), "isCharacterBased" )
}
#endif


#if SERVER || CLIENT || UI
ItemFlavor function MusicPack_GetCharacter( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	Assert( MusicPack_IsCharacterBased( flavor ) )

	asset characterAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "character" )
	Assert( characterAsset != $"" && IsValidItemFlavorSettingsAsset( characterAsset ) )

	return GetItemFlavorByAsset( characterAsset )
}
#endif


#if SERVER || CLIENT || UI
asset function MusicPack_GetPortraitImage( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	if ( MusicPack_IsCharacterBased( flavor ) )
		return CharacterClass_GetGalleryPortrait( MusicPack_GetCharacter( flavor ) )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "portraitImage" )
}
#endif


#if SERVER || CLIENT || UI
float function MusicPack_GetPortraitBlend( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsFloat( ItemFlavor_GetAsset( flavor ), "portraitBlend" )
}
#endif


#if SERVER
                                                                                         
 
	                                                                  
		      

	                  
		      

	                                                   
	 
		                                                                                             
		      
	 

	                                                         
		                                                     
	                                                                    

	                                                     

	                      
		                                                           
	    
		                                                                             
 
#endif


#if SERVER
                                                                   
 
	                                                      
		                                                                               

	                                                     
	                                       
 
#endif


#if SERVER
                                                                        
 
	                                                         
		            
	                                                                             
 
#endif


#if SERVER
                                                   
 
	                                                         
		      

	                                                                                             

	                                                       
	 
		                                       
	 
 
#endif

#if CLIENT
void function ServerCallback_PlayMatchEndMusic()
{
	                                                                                                                              
	                                                                                  

	entity clientPlayer = GetLocalClientPlayer()
	if ( clientPlayer.GetTeam() == GetWinningTeam() )
	{
		EmitSoundOnEntity( clientPlayer, MusicPack_GetWinMusic( GetMusicPackForPlayer( clientPlayer ) ) )
	}
	else
	{
		StopSoundOnEntity( clientPlayer, MusicPack_GetLossMusic( GetMusicPackForPlayer( clientPlayer ) ) )
		EmitSoundOnEntity( clientPlayer, MusicPack_GetLossMusic( GetMusicPackForPlayer( clientPlayer ) ) )
	}
}
#endif


#if SERVER && DEV
                                                        
 
	                                                         
	 
		                                   
		      
	 

	                                                                                
		                    
 
#endif


#if SERVER
                                                          
 
	                                   
 

                                                 
 
	                               

	                                         
		           

	                                                                  

	                                                               
	                                                           
 
#endif

#if SERVER || CLIENT || UI
ItemFlavor function __GetMusicPackForPlayer_RollTheRandom( entity player )
{
	ItemFlavor music = WaitForMusicPackForPlayer( player )

	if ( GRX_IsInventoryReady( player ) && ItemFlavor_IsTheRandom( music ) )
	{
		LoadoutEntry musicSlot  = Loadout_MusicPack()
		array<ItemFlavor> items = clone GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), musicSlot )

		foreach ( item in clone items )
		{
			if (
				( ItemFlavor_GetGRXMode( item ) != GRX_ITEMFLAVORMODE_NONE && !GRX_IsItemOwnedByPlayer( item, player ) )
				|| ItemFlavor_IsTheRandom( item )
				)
				items.fastremovebyvalue( item )
		}

		if ( items.len() > 0 )
		{
			music = items.getrandom()
		}
	}

	return music
}
#endif