global function ClLiveAPI_Init
global function LiveAPI_WriteLog

                      
global function ServerCallback_LiveAPI_LogNetwork_PlayerConnect
global function ServerCallback_LiveAPI_LogNetwork_OnePlayer
global function ServerCallback_LiveAPI_LogNetwork_OnePlayerAndEnt
global function ServerCallback_LiveAPI_LogNetwork_TwoPlayer
global function ServerCallback_LiveAPI_LogNetwork_CombatInstance
global function ServerCallback_LiveAPI_LogNetwork_OnePlayerItem
global function ServerCallback_LiveAPI_LogNetwork_Int
global function ServerCallback_LiveAPI_LogNetwork_InventoryAction
global function ServerCallback_LiveAPI_LogNetwork_InventoryActionWithMods
global function ServerCallback_LiveAPI_LogNetwork_RespawnTeam

        
global function LiveAPI_GetWeaponNameFromDamageSourceID

                  
global function LiveAPI_OnPlayerDowned
global function LiveAPI_OnLocalPlayerSpawned

struct
{
	bool isEnabled = false
} file

            
string function LiveAPI_GetWeaponNameFromDamageSourceID( int damageSourceID )
{
	return Localize( GetObitFromDamageSourceID( damageSourceID ) )
}

string function LiveAPI_GetItemNameFromRef( string ref )
{
    if ( SURVIVAL_Loot_IsRefValid( ref ) )
	{
		LootData lootData = SURVIVAL_Loot_GetLootDataByRef( ref )
		bool hasQuality = lootData.tier > MIN_LOOT_TIER + 1
		string itemName = Localize( lootData.pickupString )

		if ( hasQuality )
			itemName += " (Level " + string( lootData.tier ) + ")"
			
		return itemName
	}
	
	return "Unrecognised item " + ref
}

                 

                     
void function ServerCallback_LiveAPI_LogNetwork_PlayerConnect( entity player )
{
	LiveAPI_WriteLog( LiveAPI_GetEventNameFromEnum( eLiveAPI_EventTypes.playerConnected ), {
		player = LiveAPI_GetPlayerIdentityTable( player  )
	} )
}

void function ServerCallback_LiveAPI_LogNetwork_OnePlayer( int eventIndex, entity playerOne )
{
	if ( !IsValid( playerOne ) )
		return

    LiveAPI_WriteLog( LiveAPI_GetEventNameFromEnum( eventIndex ), {
        playerOne = LiveAPI_GetPlayerIdentityTable( playerOne )
    } )
}

void function ServerCallback_LiveAPI_LogNetwork_OnePlayerAndEnt( int eventIndex, entity playerOne, entity linkedEntity )
{
	if ( !IsValid( playerOne ) || !IsValid( linkedEntity ) )
		return

    string name = linkedEntity.IsWeaponX() ? linkedEntity.GetWeaponSettingString( eWeaponVar.shortprintname ) : LiveAPI_GetPlayerIdentity( linkedEntity )

    entity tacticalAbility = playerOne.GetOffhandWeapon( OFFHAND_LEFT )
    if ( linkedEntity == tacticalAbility )
        name = "Tactical (" + name + ")"

	entity ultimateAbility = playerOne.GetOffhandWeapon( OFFHAND_INVENTORY )
    if ( linkedEntity == ultimateAbility )
        name = "Ultimate (" + name + ")"

    LiveAPI_WriteLog( LiveAPI_GetEventNameFromEnum( eventIndex ), {
        playerOne = LiveAPI_GetPlayerIdentityTable( playerOne ),
        linkedEntity = name
    } )
}

void function ServerCallback_LiveAPI_LogNetwork_TwoPlayer( int eventIndex, entity playerOne, entity playerTwo )
{
	if ( !IsValid( playerOne ) || !IsValid( playerTwo ) )
		return

    LiveAPI_WriteLog( LiveAPI_GetEventNameFromEnum( eventIndex ), {
        playerOne = LiveAPI_GetPlayerIdentityTable( playerOne ),
        playerTwo = LiveAPI_GetPlayerIdentityTable( playerTwo )
    } )
}

void function ServerCallback_LiveAPI_LogNetwork_CombatInstance( int eventIndex, entity attacker, entity victim, int damageSourceId, int damageInflicted )
{
	if ( !IsValid( victim ) )
		return

    table<string, var> data = {
        attacker = LiveAPI_GetPlayerIdentityTable( attacker ),
        victim = LiveAPI_GetPlayerIdentityTable( victim )
    }

	if ( damageSourceId > 0 )
		data.weapon <- LiveAPI_GetWeaponNameFromDamageSourceID( damageSourceId )

	                                                                                      
	if ( eventIndex != eLiveAPI_EventTypes.playerKilled )
		data.damageInflicted <- damageInflicted

    LiveAPI_WriteLog( LiveAPI_GetEventNameFromEnum( eventIndex ), data )
}

void function ServerCallback_LiveAPI_LogNetwork_OnePlayerItem( int eventIndex, entity player, string itemRef )
{
	if ( !IsValid( player ) )
		return

    LiveAPI_WriteLog( LiveAPI_GetEventNameFromEnum( eventIndex ), {
        player = LiveAPI_GetPlayerIdentityTable( player ),
		item = LiveAPI_GetItemNameFromRef( itemRef )
    } )
}

void function ServerCallback_LiveAPI_LogNetwork_Int( int eventIndex, int argInt )
{
    LiveAPI_WriteLog( LiveAPI_GetEventNameFromEnum( eventIndex ), {
        index = argInt
    } )
}

                                                                              
void function ServerCallback_LiveAPI_LogNetwork_InventoryActionWithMods( int eventIndex, entity player, string itemRef, int quantity, string extraData )
{
	if ( !IsValid( player ) )
		return

    string modList = ""

    if ( extraData.len() > 0 )
    {
                                                                                                                                          
        array<string> extraDataAsArray = split( extraData, " " )

        int curIndex = 0
        foreach ( mod in extraDataAsArray )
        {
            curIndex++

            if ( SURVIVAL_Loot_IsRefValid( mod ) )
			{
				LootData lootData = SURVIVAL_Loot_GetLootDataByRef( mod )
				bool hasQuality = lootData.tier > MIN_LOOT_TIER
				string qualityName = "Level " + string( lootData.tier )

				modList = modList + Localize( lootData.pickupString ) 
            
				if ( hasQuality )
					modList = modList + " (" + qualityName + ")"
					
				if ( extraDataAsArray.len() != curIndex )
					modList = modList + ", "
			}
        }
    }

	table<string, var> data = {
		player = LiveAPI_GetPlayerIdentityTable( player ),
		item = LiveAPI_GetItemNameFromRef( itemRef ),
		extraData = modList
	}

	data.quantity <- quantity

    LiveAPI_WriteLog( LiveAPI_GetEventNameFromEnum( eventIndex ), data )
}

void function ServerCallback_LiveAPI_LogNetwork_InventoryAction( int eventIndex, entity player, string itemRef, int quantity )
{
	if ( !IsValid( player ) )
		return

	table<string, var> data = {
		player = LiveAPI_GetPlayerIdentityTable( player )
		item = LiveAPI_GetItemNameFromRef( itemRef )
	}

	data.quantity <- quantity

	LiveAPI_WriteLog( LiveAPI_GetEventNameFromEnum( eventIndex ), data )
}

void function ServerCallback_LiveAPI_LogNetwork_RespawnTeam( entity player, string playerList )
{
	if ( !IsValid( player ) )
		return

	LiveAPI_WriteLog( "playerRespawnTeam", {
		player = LiveAPI_GetPlayerIdentityTable( player ),
		team = playerList
	} )
}

                         

             
void function LiveAPI_OnPlayerDisconnected( entity player )
{
	if ( !IsValid( player ) )
		return

	if ( IsLocalClientPlayer( player ) )
	{
		LiveAPI_FinishLogging()
		return
	}

	LiveAPI_WriteLog( "playerDisconnected", {
        player = LiveAPI_GetPlayerIdentityTable( player )
    } )
}
                  

                 
void function LiveAPI_OnPlayerDowned( entity attacker, entity victim, int damageSourceId )
{
	if ( !IsValid( attacker ) || !IsValid( victim ) )
		return

	LiveAPI_WriteLog( "playerDowned", {
		attacker = LiveAPI_GetPlayerIdentityTable( attacker ),
		victim = LiveAPI_GetPlayerIdentityTable( victim ),
		weapon = LiveAPI_GetWeaponNameFromDamageSourceID( damageSourceId )
	} )
}
                      

              
void function LiveAPI_OnDeathFieldStartShrink( DeathFieldStageData deathFieldData )
{
    LiveAPI_WriteLog( "ringStartClosing", {
        stage = SURVIVAL_GetCurrentDeathFieldStage() 
    } )
}

void function LiveAPI_OnDeathFieldStopShrink( DeathFieldStageData deathFieldData )
{
    LiveAPI_WriteLog( "ringFinishedClosing", {
        stage = SURVIVAL_GetCurrentDeathFieldStage()
    } )
}
                   

void function LiveAPI_OnGameStateChanged( entity player, int oldVal, int newVal, bool actuallyChanged )
{
	if ( !IsPrivateMatch() )
		return

	if ( !actuallyChanged )
		return
	                         
	if ( newVal == eGameState.WinnerDetermined )
	{
		int winnerTeam = GetNetWinningTeam()

		string winnerNames
		array<entity> playerList = GetPlayerArray()

		foreach ( listedPlayer in playerList )
		{
			if ( listedPlayer.GetTeam() != winnerTeam )
				continue

			winnerNames += LiveAPI_GetPlayerIdentity( listedPlayer ) + ", "
		}

		                                                         
		winnerNames = winnerNames.slice( 0, winnerNames.len() - 2 )

		LiveAPI_WriteLog( "matchStateEnd", {
			state = GetEnumString( "eGameState", GetGameState() ),
			winners = winnerNames
		} )

		return
	}

    LiveAPI_WriteLog( "gameStateChanged", {
        state = GetEnumString( "eGameState", GetGameState() )
    } )
}

void function LiveAPI_OnLocalPlayerSpawned( entity localPlayer )
{
	if ( !LiveAPI_IsValidToRun() )
	{
		printf( "[LiveAPI] Can't run system (OnLocalPlayerSpawned)" )
		return
	}

	                                 
	Remote_ServerCallFunction( "ClientCallback_LiveAPI_JoinObservers" )
	printf( "[LiveAPI] Local player spawned " + string( localPlayer ) )
}

void function ClLiveAPI_Init()
{
	printf( "[LiveAPI] ClLiveAPI_Init()" )

	                                
	LiveAPI_StartCallbacks()

	                                       
	AddCallback_OnClientScriptInit( LiveAPI_OnLocalPlayerSpawned )
}

void function LiveAPI_StartCallbacks()
{
	if ( !LiveAPI_IsValidToRun() )
	{
		printf( "[LiveAPI] Can't run system (StartCallbacks - Make sure to set the ConVars correctly)" )
		return
	}

	if ( LiveAPI_IsLogging() )
	{
		printf( "[LiveAPI] Problem: Tried to StartCallbacks while already logging." )
		return
	}

	printf( "[LiveAPI] Started callbacks" )

	                       
	LiveAPI_StartLogging()

	                                                                   
	                           
	string version = LiveAPI_GetGameVersion()

	LiveAPI_WriteLog( "init", {
		gameVersion = version
	} )

                        
    AddCallback_OnPlayerDisconnected( LiveAPI_OnPlayerDisconnected )

                                   
    SURVIVAL_AddCallback_OnDeathFieldStartShrink( LiveAPI_OnDeathFieldStartShrink )
    SURVIVAL_AddCallback_OnDeathFieldStopShrink( LiveAPI_OnDeathFieldStopShrink )

    if ( !IsLobby() )
		RegisterNetVarIntChangeCallback( "gameState", LiveAPI_OnGameStateChanged )
}

                                                           
void function LiveAPI_WriteLog( string category, table<string, var> data )
{
	if ( !LiveAPI_IsValidToRun() )
	{
		printf( "[LiveAPI] Can't run system (WriteLog - Make sure to set the ConVars correctly)" )
		return
	}
	else
	{
		if ( !LiveAPI_IsLogging() )
		{
			LiveAPI_StartCallbacks()
		}
	}

	if ( !LiveAPI_IsLogging() )
	{
		printf( "[LiveAPI] Problem: Tried to WriteLog while logger is disabled." )
		return
	}

	if ( !IsConnected() )
	{
		printf( "[LiveAPI] Problem: Tried to WriteLog while not connected to a server." )
		return
	}

	data.timestamp <- GetUnixTimestamp()
	data.category <- category

	printf( "[LiveAPI] Category: " + category + ", timestamp: " + data.timestamp )

	LiveAPI_LogRaw( data )
}
